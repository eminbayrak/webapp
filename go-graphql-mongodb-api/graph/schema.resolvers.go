package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"fmt"
	"go-graphql-mongodb-api/db"
	"go-graphql-mongodb-api/graph/model"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// Call the CreateTodo function from the db package to insert a new Todo
	err := db.CreateTodo(input)
	if err != nil {
		return nil, err
	}

	// Query MongoDB to retrieve the newly created Todo by text
	createdTodo, err := db.FetchTodoByText(input.Text)
	if err != nil {
		return nil, err
	}

	return createdTodo, nil
}

// Create News
func (r *mutationResolver) CreateNews(ctx context.Context, input model.NewNews) (*model.News, error) {
	// Call the CreateNews function from the db package to insert a new News
	result, err := db.CreateNews(input)
	if err != nil {
		return nil, err
	}

	// Retrieve the generated ID from the result of the CreateNews operation.
	newsID := result.InsertedID.(primitive.ObjectID).Hex()
	// fmt.Printf("Inserted news with ID: %s\n", newsID)

	// Use the retrieved ID to fetch the newly created news item.
	createdNews, err := db.FetchNewsByID(newsID)
	if err != nil {
		return nil, err
	}

	// Assign the retrieved ID to the ID field of the createdNews.
	createdNews.ID = newsID

	// fmt.Printf("Created news: %+v\n", createdNews)

	return createdNews, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
